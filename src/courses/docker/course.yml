name: Docker
txt: |
  image::docker.logo.svg[Docker logo,300,opts="inline"]
units:
- name: Introduction
  lessons:
  - name: Docker concepts
    modules:
    - name: Introduction
      inst:
      # intro 1
      - type: info
        txt: |
          Like all Spoonfeeder courses,
          this course is self-contained.
          Do not try to follow
          along by replicating
          what you read
          using a real Docker installation.

          No installation
          of Docker
          is required.

          image::docker.prohibited.svg[No Docker!,100,opts="inline"]

          Just read,
          complete the exercises,
          and learn Docker.
      - type: bool
        txt: A computer with Docker installed is required to complete this course.
        ans: no
      # intro 2
      - type: info
        txt: |
          This course assumes
          basic computer knowledge,
          including using a command prompt
          such as PowerShell, Bash, ZShell,
          or the Windows Command Prompt.

          image::command.prompt.svg[Command prompt,100,opts="inline"]

          If you have never
          used a command prompt
          then gain experience with one
          before starting this course.
      - type: bool
        txt: Knowledge of a command prompt is required for this course.
        ans: yes
      # docker run 1
      - type: info
        txt: |
          On a computer
          with Docker installed and running,
          we can type at a command prompt

          `docker run hello-world`.

          and see in the output

          `Hello from Docker!`
      # docker run 2
      - type: info
        txt: |
          `docker run`
          is an example
          of a _Docker command_.

          A Docker command
          instructs Docker
          to do something.
      # docker run 3
      - type: info
        txt: |
          Although the output
          (`Hello from Docker!`)
          is trivial,
          `docker run hello-world`
          completed the following:

          . Pulled an _image_
            called `hello-world`
            from a _Docker repository_;
          . Created a _container_
            from the `hello-world` image; and
          . Executed a default command
            in the container
            to output `Hello from Docker!`

          Docker performed a lot of work just to print that message.
      # images and containers
      - type: info
        txt: |
          In the last slide
          Docker took two actions

          . pull an _image_
          . create a _container_

          Images and containers
          are the most central concepts
          of Docker.
      # containers
      - type: info
        txt: |
          A _container_ is a sandboxed process running on a host machine.

          _Sandboxed_ means the process has no access to or awareness of the host or other sandboxed processes.
      - type: bool
        txt: A sandboxed process can identify the operating system version of it's host.
        ans: 'no'
        exp: A sandboxed process has no knowledge of it's host.
      #Docker
      - type: info
        txt: |
          Docker is software that _containerizes_ applications.

          _Applications_ may include databases, Web servers, or even entire operating systems.

          In lieu of installing the application on the host machine,
          a Docker _container_ can be installed instead.
          Containers are easily added and removed. Most importantly,
          several instances can execute simultaneosly,
          even of different versions.
          So for example, Python 2 and Python 3 (Python is a programming language)
          containers can execute simultaneously.
          They're unaware of each other.
      - type: bool
        txt: |
          With Docker, two copies of PostgreSQL 11 and three copies of PostgreSQL 12
          (PostgreSQL is a database management server) could operate simultaneously.
        ans: 'yes'
        exp: |
          A container allows multiple copies of multiple versions of applications to execute at the same time.
          They are unaware of each other.
      - type: bool
        txt: Docker cannot containerize operating systems.
        ans: 'no'
        exp: Docker can fully containerize operating systems.
      # images
      - type: info
        txt: |
          An _image_ is a filesystem (a set of computer disk folders and files) and
          a set of instructions containing everything required to execute an application in a container.

          An image is like blueprints and materials to build a house. The container is the built house.
          A container is an executable instance of an image. An image cannot be executed.
          An image must be built (not just copied) as a container first.
      - type: bool
        txt: An image is simply copied to a container.
        ans: 'no'
        exp: An image must be built into a container.
      - type: bool
        txt: Docker executes images
        ans: 'no'
        exp: Docker executes containers that are built from images.
      - type: bool
        txt: An image contains a filesystem and build instructions.
        ans: 'yes'
        exp: null
      # summary
      - type: info
        txt: |
          Summary

          `docker run`: create and run a new container from an image
          #sandboxed#: when an application cannot know about or affect its host environment
          #container#: a sandboxed process running on a host machine
          #Docker#: software that containerizes applications
          #image#: a filesystem and build instructions containing everything required to execute in a container

          Docker enables multiple copies of multiple versions of applications to execute simulataneously.
      exercises:
        - type: gap
          txt: (1) builds (2) into to (3) that are in (4) on the host machine.
          ans:
          - Docker
          - images
          - containers
          - sandboxes
        # - type: vocab
        #   list:
        #     Docker: software that containerizes applications
        #     image: a filesystem and build instructions containing everything required to execute in a container
        #     container: a sandboxed process running on a host machine
        #     sandbox: an application cannot know about or affect its host environment
    # lesson: microservices
    - name: Microservices
      inst:
      - type: info
        txt: |
          The primary use case for Docker is operating _microservices_.
          For example, instead of one copy of the Apache Web server executing, several copies,
          each in a container, execute simultaneously.
          The redundancy enables failed copies of Apache to gracefully degrade capacity.
          If there was only one copy executing and it failed then the site would be offline.
          Microservices provide fault tolerance through redundancy.

          #microservice#: a minimal application designed to do one small task and
          deployed redundantly in Docker containers
      - type: bool
        txt: The primary benefit of microservices is ease of administration.
        ans: 'no'
        exp: The primary benefit of microservices is fault tolerance.
      - type: bool
        txt: The primary use case for Docker is operating _microservices_.
        ans: 'yes'
        exp:
      # microservices 2
      - type: info
        txt: |
          _Microservices_ have their name because each container should be as small as possible.
          A set of database management microservices may exist where each microservice
          only serves part of the data required for a composite service or application.
          Each of those microservices (which corresponds to an _image_)
          would operate redundantly across many containers.
      - type: bool
        txt: A microservice container should be as small as possible.
        ans: 'yes'
        exp: null
      - type: info
        txt: |
          Summary

          * The primary use case for Docker is operating _microservices_.
          * Microservices provide fault tolerance through redundancy.
          * A microservice container should be as small as possible.
      exercises:
      - type: gap
        txt: A (1) provides (2) through (3).
        ans:
          - microservice
          - fault tolerance
          - redundancy
    # Lesson summary
    - name: Lesson summary and review
      inst:
      - type: info
        txt: |
          #microservice#: a minimal application designed to do one small task and
          deployed redundantly in Docker containers

          * Docker enables multiple copies of multiple versions of applications to execute simulataneously.
          * Docker executes containers that are built from images.
          * Images can be built to multiple containers but a container can only contain one image.
          * The primary use case for Docker is operating _microservices_.
          * Microservices provide fault tolerance through redundancy.
          * A microservice container should be as small as possible.
      exercises:
      # - type: vocab
      #   list:
      #     Docker: software that containerizes applications
      #     image: |
      #       a filesystem and build instructions
      #       containing everything required to execute in a container
      #     container: a sandboxed process running on a host machine
      #     sandbox: an application cannot know about or affect its host environment
      #     microservice: |
      #       a minimal application designed to do one small task
      #       and deployed redundantly in Docker containers
      #     "`docker run`": Create and run a new container from an image
      - type: bool
        txt: Microservices provide fault tolerance through redundancy.
        ans: 'yes'
        exp: null
      - type: bool
        txt: Docker enables multiple copies of multiple versions of applications to execute simulataneously.
        ans: 'yes'
        exp: null
      - type: bool
        txt: A microservice container should be as large as possible.
        ans: 'no'
        exp: A microservice container should be as small as possible.
      - type: bool
        txt: Docker executes containers that are built from images.
        ans: 'yes'
        exp: null
      - type: bool
        txt: Images can be built to only one container but a container can only contain many images.
        ans: 'no'
        exp: Images can be built to multiple containers but a container can only contain one image.
      # - type: bool
      #   txt: The primary use case for Docker is operating _microservices_.
      #   ans: 'yes'
      #   exp: null
    - name: Working with images and containers
      inst:
      - type: info
        txt: |
          image::docker.basic.svg[Static,1200,opts="inline"]

          Docker is split into two primary parts, a client and a server.

          The Docker client sends requests and receives responses from the Docker server.

          The Docker server controls images and containers.

          An Image may be deployed to multiple containers.

          A container can only contain one image.
      - type: bool
        txt: The Docker client controls containers.
        ans: no
        exp: The Docker client communicates with the Docker server which controls containers.
      - type: bool
        txt: A container can contain multiple images.
        ans: no
        exp: A container can contain only one image.
      - type: bool
        txt: An Image may be built to multiple containers.
        ans: yes
        exp: null
      - type: info
        txt: |
          The Docker client is invoked with `docker` at a command prompt
          (such as PowerShell, Bash, ZShell, or the Windows Command Prompt)
          followed by a Docker command. For example, typing

          `docker version`

          at a command prompt provides the operational status of Docker.

          [literal]
          ----
          $ docker version
          Client: Docker Engine - Community
          Version:          25.0.0

          Server: Docker Engine - Community
          Version:          25.0.0
          ----

          If the server is not running then an error message will appear:

          `Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?`
      - type: bool
        txt: Invoking `docker` starts the server.
        ans: no
        exp: Invoking `docker` starts the client.
      - type: bool
        txt: "`docker version` provides the operational status of the server."
        ans: 'yes'
        exp: null
      exercises:
      - type: gap
        txt: The Docker (1) communicates with the Docker (2) which controls (3)s.
        ans:
          - client
          - server
          - container
      - type: bool
        txt: An image can only be contained in one container and a container can only contain one image.
        ans: no
        exp: An image can contained in multiple containers but a container can only contain one image.
      - type: mc
        txt: |
          The following is seen upon invoking `docker version`.

          Server: Docker Engine - Community
          Engine:
            Version:          25.0.0
            API version:      1.44 (minimum version 1.24)

          This tells us that
        o:
          - The server is functioning.
          - The server is not functioning.
          - The client is not functioning.
          - At least one container is executing.
        exp: |
          `docker version` provides information on the client and server.
          If the server is not functioning then an error message about it will be returned.
    - name: Images
      inst:
      - type: info
        txt: |
          Docker must have an image for any significant work.
          To obtain an image use the command

          `docker pull`

          [literal]
          ----
          $ docker pull hello-world
          Using default tag: latest
          Status: Downloaded newer image for hello-world:latest
          ----
          Docker maintains an image registry at hub.docker.com.
          When using `docker pull`, hub.docker.com is the default registry
          but other registries can be used by passing in the full URI.
          For example, `docker pull quay.io/nginx/nginx:latest`
          will pull the "nginx" image from the quay.io registry.

          docker pull: download an image from a registry
      - type: bool
        txt: Is the purpose of `docker pull` to obtain containers?
        ans: no
        exp: The purpose of `docker pull` to obtain images.
      - type: bool
        txt: A registry is required to be specified with `docker pull`
        ans: no
        exp: "`docker pull` will default to hub.docker.com if not registry is specified."
      - type: info
        txt: |
          We can see the image we just pulled as being added
          to our Docker server with the command

          `docker images`

          [literal]
          ----
          $ docker images
          REPOSITORY    IMAGE ID
          hello-world   ee301c921b8a
          ----
          `docker images`: list images
      - type: info
        txt: |
          `docker rmi` removes images.

          [literal]
          ----
          $ docker rmi hello-world
          Untagged: hello-world:latest
          Deleted: sha256:12660636fe55438cc3ae7424da7ac56e845cdb52493ff9cf949c47a7f57f8b43
          $ docker images
          REPOSITORY   TAG       IMAGE ID
          ----
      exercises:
      - type: sort
        txt:  |
          We want to download an image, see the image listed, and delete the image.
          Place the commands in the correct order.
        ans: ['`docker pull`', '`docker images`','`docker rmi`']
      # - type: bool
      #   txt:
      #   ans: yes
      #   exp: null
    # - name: Containers
    #   inst:
    #   - type: info
    #     txt: |
    #       Create a container from an image with

    #       `docker create`

    #       [literal]
    #       ----
    #       $ docker create hello-world
    #       647bc74903be55cf4d6abdf95ba75def9517d4424e2bba2a314743498af2e53c
    #       ----
    #       The line below the command is an automatically generated container ID.

    #       docker create: create a new container
    #   - type: info
    #     txt: |
    #       The container ID from

    #       [literal]
    #       ----
    #       $ docker create hello-world
    #       647bc74903be55cf4d6abdf95ba75def9517d4424e2bba2a314743498af2e53c
    #       ----

    #       Can be seen in shortened form when listing containers with

    #       `docker ps -a`

    #       [literal]
    #       ----
    #       $ docker ps -a
    #       CONTAINER ID IMAGE       NAMES
    #       647bc74903be hello-world cool_mayer
    #       ----
    #       By default, `docker ps` only displays actively executing containers.
    #       We need `-a` to see inactive containers.

    #       docker ps: list containers
    #   - type: bool
    #     txt: The `-a` in `docker ps -a` suppresses display of stopped containers.
    #     ans: no
    #     exp: The `-a` in `docker ps -a` causes display of stopped containers.
    #   - type: info
    #     txt: |
    #       Notice `cool_mayer`:

    #       [literal]
    #       ----
    #       $ docker ps -a
    #       CONTAINER ID IMAGE       NAMES
    #       647bc74903be hello-world cool_mayer
    #       ----
    #       Docker maintains a list of adjectives and nouns.
    #       For each container, Docker generates an adjective-noun pairing to create container names.
    #       Users can supply their own container name via the `--name` parameter passed to `docker create`.

    #       [literal]
    #       ----
    #       $ docker create --name HelloWorld hello-world
    #       $ docker ps -a
    #       CONTAINER ID IMAGE       NAMES
    #       a9c5e62a1813 hello-world HelloWorld
    #       647bc74903be hello-world cool_mayer
    #       ----
    #   - type: bool
    #     txt: After executing `docker create --name HelloWorld hello-world` will the container name be `HelloWorld`?
    #     ans: yes
    #     exp: null
    #   - type: info
    #     txt: |
    #       With a container created we can start the container named "cool_mayer" with

    #       `docker start`

    #       [literal]
    #       ----
    #       $ docker start -a cool_mayer
    #       Hello from Docker!
    #       This message shows that your installation appears to be working correctly.
    #       ----
    #       `cool_mayer` is not part of the `-a` parameter.
    #   - type: info
    #     txt: |
    #       Without the `-a` parameter, `docker start` by default displays the name instead of the output.
    #       [literal]
    #       ----
    #       $ docker start cool_mayer
    #       cool_mayer
    #       ----
    #       The container still started but did not display the output.
    #   - type: info
    #     txt: |
    #       When referencing a container, one may use either the container ID or the name.

    #       [literal]
    #       ----
    #       $ docker start -a 647bc74903be

    #       Hello from Docker!
    #       This message shows that your installation appears to be working correctly.
    #       ----
    #       This is true of any docker command requiring a container parameter:
    #       either the container name or container ID can be supplied.
    #   - type: info
    #     txt: |
    #       `docker start` can start multiple containers at once:
    #       [literal]
    #       ----
    #       $ docker start cool_mayer happy_owl mad_mouse
    #       cool_mayer happy_owl mad_mouse
    #       ----
    #       docker start: start one or more stopped containers
    #   - type: bool
    #     txt: |
    #       `docker start sad_deer optimistic_octopus depressed_otter`
    #       will return an error stating only one container may be started at a time.
    #     ans: no
    #     exp: "`docker start` can start many containers at the same time."
    #   - type: info
    #     txt: |
    #       `docker rm` removes containers.

    #       [literal]
    #       ----
    #       $ docker rm HelloWorld cool_mayer
    #       HelloWorld
    #       cool_mayer
    #       $ docker ps -a
    #       CONTAINER ID   IMAGE  NAMES
    #       ----
    #       As long as any container uses an image, an image cannot be removed.
    #       `docker rmi` will fail if the image is used by a container.
    #   # - type: bool
    #   #   txt:
    #   #   ans: yes
    #   #   exp: null
    #   - type: info
    #     txt: |
    #       `docker run` is a convenience command that will

    #         * pull an image,
    #         * create an image, and
    #         * start a container for that image

    #       all at once.

    #       [literal]
    #       ----
    #       $ docker run hello-world
    #       Unable to find image 'hello-world:latest' locally
    #       Status: Downloaded newer image for hello-world:latest

    #       Hello from Docker!
    #       This message shows that your installation appears to be working correctly.
    #       ----

    #       So, `docker run` combines the three commands in sequence:

    #       . `docker pull`
    #       . `docker create`
    #       . `docker start -a`
    #   - type: info
    #     txt: |
    #       `docker run: pull an image, create a container, and start the container
    #   - type: info
    #     txt: |
    #       Module review
    #         docker pull: download an image from a registry
    #         docker create: create a new container
    #         docker start: start one or more stopped containers
    #         docker run: pull an image, create a container, and start a the container
    #         docker images: list images
    #         docker ps: list containers
    #         docker rmi: removes images
    #         docker rm: remove one or more containers
    #   exercises:
    #   - type: vocab
    #     list:
    #       docker pull: download an image from a registry
    #       docker create: create a new container
    #       docker start: start one or more stopped containers
    #       docker run: pull an image, create a container, and start a the container
    #       docker images: list images
    #       docker ps: list containers
    #       docker rmi: removes images
    #       docker rm: remove one or more containers
    #   - type: sort
    #     txt: list in the order needed to execute them when deploying an image
    #     ans:
    #       - git clone
    #       - create Dockerfile
    #       - docker build
    #       - docker run
    #       - docker ps
    # - name: A simple server container
      # inst:
      # - type: info
      #   txt: |
      #     In practice, most Docker containers contain servers that do not exit until instructed to do so.
      #     The hello-world image from past modules excecuting and exiting immediately is atypical.
      #     We will use a server container that stays running until instructed to stop.
      # - type: info
      #   txt: |
      #     We will use a new image via

      #     `docker run --name bare-nginx -d -p 80:80 nginx`.

      #     nginx is a web  server.

      #     `-d` detaches the container from the command prompt.
      #     Otherwise the container does not relenquish control of the command prompt.

      #     `-p 80:80` is a port mapping, exposing port 80 of the container to port 80 of the host.
      #     This enables navigation to the contained Web server's offerings from the host.

      #     After the command completes,
      #     navigating to `http://localhost:80/index.html` will display a default Web page:

      #     #Welcome to nginx!#
      # - type: info
      #   txt: |
      #     The filesystem of an active container can be navigated if the container contains a command prompt.

      #     This command executes bash from withing the container.

      #     [literal]
      #     ----
      #     $ docker exec -it bare-nginx bash
      #     root@fa441798c8ee:/# ls
      #     bin  boot  dev	docker-entrypoint.d  docker-entrypoint.sh
      #     etc	home  lib  media  mnt  opt  proc  root	run  sbin
      #     srv	sys  tmp  usr  var
      #     root@fa441798c8ee:/#
      #     ----
      #     We are in the root directory of the container.

      #     Most containers use the `root` account without a password.
      # - type: info
      #   txt: |
      #     When exiting the container filesystem back to the host command prompt, use hotkey

      #     ctrl-p-q

      #     Do not use `exit` in the container command prompt.
      #     `exit` will not only exit the container environment but often stop the container as well.
    # - name: Containerization
    # - name: Dockerfiles
    #   inst:
    #   - type: info
    #     txt: |
    #       ADD
    #       ARG
    #       CMD
    #       COPY
    #       ENTRYPOINT
    #       ENV
    #       EXPOSE
    #       FROM
    #       HEALTHCHECK
    #       LABEL
    #       MAINTAINER
    #       ONBUILD
    #       RUN
    #       SHELL
    #       STOPSIGNAL
    #       USER
    #       VOLUME
    #       WORKDIR
    #   - type: info
    #     txt: |
    #       ADD:: Add local or remote files and directories.
    #       ARG:: Use build-time variables.
    #       CMD:: Specify default commands.
    #       COPY:: Copy files and directories.
    #       ENTRYPOINT:: Specify default executable.
    #       ENV:: Set environment variables.
    #       EXPOSE:: Describe which ports your application is listening on.
    #       FROM:: Create a new build stage from a base image.
    #       HEALTHCHECK:: Check a container's health on startup.
    #       LABEL:: Add metadata to an image.
    #       MAINTAINER:: Specify the author of an image.
    #       ONBUILD:: Specify instructions for when the image is used in a build.
    #       RUN:: Execute build commands.
    #       SHELL:: Set the default shell of an image.
    #       STOPSIGNAL:: Specify the system call signal for exiting a container.
    #       USER:: Set user and group ID.
    #       VOLUME:: Create volume mounts.
    #       WORKDIR:: Change working directory.
    # - name: Development containers
    # - name: Docker Commands
    # - name: The Docker server
    # - name: Image registries
      # inst:
      # - type: info
      #   txt: |
      #     - "`docker search`"
      #     - "`docker push`"
